demo()
b <- 3.145
a <- 3
b <- 3.145
typeof(a)
typeof(b)
someString <- "This is a random string"
typeof(someString)
typeof(a)
typeof(b)
boleanTrue <- TRUE
boleanFalse <- FALSE
typeof(boleanTrue)
typeof(boleanFalse)
typeof(boleanTrue)
typeof(boleanFalse)
somecharactervector
boleanTrue2 <- T
boleanFalse2 <- F
typeof(boleanTrue2)
typeof(boleanFalse2)
somecharactervector <- c("Sonia", "Travis", "Lauren")
typeof(somecharactervector)
somecharactervector[1]
someNumbervector <- c(0,1,2,3)
typeof(someNumbervector)
someMixedvector <- c('char',1)
typeof(someMixedvector)
someMixedvector2 <- c(1, 'char')
typeof(someMixedvector2)
somecharactervector2 <- c("Victor", "Anna", "Val")
acombinedvector <- c(somecharactervector, somecharactervector2)
for (name in acombinedvector){
print(name)
}
source('~/Desktop/Data Analysis Class/Module 15/R_Analysis/rSyntaxExamples.R')
source('~/Desktop/Data Analysis Class/Module 15/R_Analysis/rSyntaxExamples.R')
debugSource('~/Desktop/Data Analysis Class/Module 15/R_Analysis/rSyntaxExamples.R')
?length
nameIndices <- 1:`length(acombinedvector)
nameIndices <- 1:length(acombinedvector)
nameIndicesSquared <- nameIndices**2
nameIndicesTimes9 <- 9*nameIndices
imaginaryNumber <- 2 + 3i
typeof(imaginaryNumber)
typeof(imaginaryNumber)
source('~/Desktop/Data Analysis Class/Module 15/R_Analysis/rSyntaxExamples.R')
?length
??
for (name in acombinedvector){
print(name)
}
a <- 3
b <- 3.145
typeof(a)
typeof(b)
someString <- "This is a random string"
typeof(someString)
boleanTrue <- TRUE
boleanFalse <- FALSE
typeof(boleanTrue)
typeof(boleanFalse)
boleanTrue2 <- T
boleanFalse2 <- F
typeof(boleanTrue2)
typeof(boleanFalse2)
somecharactervector <- c("Sonia", "Travis", "Lauren")
typeof(somecharactervector)
somecharactervector[1]
someNumbervector <- c(0,1,2,3)
typeof(someNumbervector)
# Mixing datatypes will implicitly convert them to the character data type for vectors
someMixedvector <- c('char',1)
typeof(someMixedvector)
someMixedvector2 <- c(1, 'char')
typeof(someMixedvector2)
somecharactervector2 <- c("Victor", "Anna", "Val")
acombinedvector <- c(somecharactervector, somecharactervector2)
for (name in acombinedvector){
print(name)
}
nameIndices <- 1:length(acombinedvector)
nameIndicesSquared <- nameIndices**2
nameIndicesTimes9 <- 9*nameIndices
imaginaryNumber <- 2 + 3i
typeof(imaginaryNumber)
someMixedDatatypeList <- list(
"names" <- acombinedvector,
"numbers" <- someNumbervector,
"bools=" <- c(T,F,T,F)
)
someMixedDatatypeList["names"]
typeof(someMixedDatatypeList)
typeof(someMixedDatatypeList["names"])
someMixedList <- list(0, 'a', c(T,F))
someMixedList[1]
printHello <- function(){
print("Hello")
}
printHello()
Sonia_mean <- function(someNumbervector){
for(number in someNumbervector){
sum <- number + sum
}
return(sum / length(someNumbervector))
}
someNumbervector <- c(0,1,2,3)
Sonia_mean(somecharactervector = somecharactervector)
Sonia_mean <- function(someNumbervector){
for(number in someNumbervector){
sum <- number + sum
}
return(sum / length(someNumbervector))
}
someNumbervector <- c(0,1,2,3)
Sonia_mean(somecharactervector = somecharactervector)
Sonia_mean(someNumbervector = someNumbervector)
OneLine_mean <- function(someNumbervector){
return( (1:sum(someNumbervector))/length(someNumbervector) )
}
OneLine_mean(someNumbervector)
Sonia_mean(someNumbervector = someNumbervector)
printHello <- function(){
print("Hello")
}
printHello()
Sonia_mean <- function(someNumbervector){
sum <- 0
for(number in someNumbervector){
sum <- number + sum
}
return(sum / length(someNumbervector))
}
someNumbervector <- c(0,1,2,3)
Sonia_mean(someNumbervector = someNumbervector)
OneLine_mean <- function(someNumbervector){
return( (1:sum(someNumbervector))/length(someNumbervector) )
}
OneLine_mean(someNumbervector)
dieRandomVariable <- c(1,2,3,4,5,6)
Sonia_mean(dieRandomVariable)
weightedCrookedDievalues <- c(0.02, .2, .05, .33, .2, .2)
printHello <- function(){
print("Hello")
}
printHello()
Sonia_mean <- function(someNumbervector){
sum <- 0
for(number in someNumbervector){
sum <- number + sum
}
return(sum / length(someNumbervector))
}
someNumbervector <- c(0,1,2,3)
Sonia_mean(someNumbervector = someNumbervector)
OneLine_mean <- function(someNumbervector){
return( (1:sum(someNumbervector))/length(someNumbervector) )
}
OneLine_mean(someNumbervector)
dieRandomVariable <- c(1,2,3,4,5,6)
Sonia_mean(dieRandomVariable)
weightedCrookedDievalues <- c(0.02, .2, .05, .33, .2, .2)
Sonia_weieghtedMean <- function(randomVariable, weightVector){
sumOfweightsAndvariables <- 0
sumOfweights <- 0
for (i in 1:length(randomVariable)){
sumOfweightsAndvariables <- (randomVariable[i] * weightVector[i] ) + sumOfweightsAndvariables
sumOfweights = weightVector[i]
}
return (sumOfweightsAndvariables/sumOfweights)
}
Sonia_weieghtedMean(dieRandomVariable,weightedCrookedDievalues)
printHello <- function(){
print("Hello")
}
printHello()
Sonia_mean <- function(someNumbervector){
sum <- 0
for(number in someNumbervector){
sum <- number + sum
}
return(sum / length(someNumbervector))
}
someNumbervector <- c(0,1,2,3)
Sonia_mean(someNumbervector = someNumbervector)
OneLine_mean <- function(someNumbervector){
return( (1:sum(someNumbervector))/length(someNumbervector) )
}
OneLine_mean(someNumbervector)
dieRandomVariable <- c(1,2,3,4,5,6)
Sonia_mean(dieRandomVariable)
weightedCrookedDievalues <- c(0.02, .2, .05, .33, .2, .2)
Sonia_weieghtedMean <- function(randomVariable, weightVector){
sumOfweightsAndvariables <- 0
sumOfweights <- 0
for (i in 1:length(randomVariable)){
sumOfweightsAndvariables <- (randomVariable[i] * weightVector[i] ) + sumOfweightsAndvariables
sumOfweights = weightVector[i]
}
return (sumOfweightsAndvariables/sumOfweights)
}
Sonia_weieghtedMean(dieRandomVariable,weightedCrookedDievalues)
Sonia_weieghtedVariance <- function(randomVariable, weightVector){
sumOfweightsAndvariables <- 0
sumOfweights <- 0
mean <- Sonia_weieghtedMean(randomVariable, weightVector)
for (i in 1:length(randomVariable)){
sumOfweightsAndvariables <- (weightVector[i] * randomVariable[i] - mean**2 ) + sumOfweightsAndvariables
sumOfweights = weightVector[i] + sumOfweights
}
return (sumOfweightsAndvariables/sumOfweights)
}
Sonia_weieghtedVariance(dieRandomVariable, weightedCrookedDievalues)
# Import libraries
library(tidyverse)
# Load csv file
MechaCar <- read.csv("MechaCar_mpg.csv", check.names=TRUE)
# Import libraries
library(tidyverse)
# Load csv file
MechaCar <- read.csv("/Users/sonia_ij/Desktop/Data Analysis Class/Module 15/R_Analysis/Challenge/data/MechaCar_mpg.csv", check.names=TRUE)
# Import libraries
library(tidyverse)
# Load csv file and rename headers
MechaCar <- read.csv("/Users/sonia_ij/Desktop/Data Analysis Class/Module 15/R_Analysis/Challenge/data/MechaCar_mpg.csv", check.names=TRUE)
lm(mpg ~ vehicle.length + vehicle.weight + spoiler.angle + ground.clearance + AWD, data = MechaCar)
MechaCar
# Import libraries
library(tidyverse)
# Load csv file
MechaCar <- read.csv("/Users/sonia_ij/Desktop/Data Analysis Class/Module 15/R_Analysis/Challenge/data/MechaCar_mpg.csv", check.names=TRUE)
MechaCar
#Create multiple linear regression model with all variables
lm(mpg ~ vehicle.length + vehicle.weight + spoiler.angle + ground.clearance + AWD, data = MechaCar)
#Generate Summary Statistics
summary(lm(mpg ~ vehicle.length + vehicle.weight + spoiler.angle + ground.clearance + AWD, data = MechaCar))
# Load
Suspension_Coil <- read.csv("/Users/sonia_ij/Desktop/Data Analysis Class/Module 15/R_Analysis/Challenge/data/Suspension_Coil.csv", check.names=TRUE)
Suspension_Coil
#Generate Summary Stats
summary(Suspension_Coil)
sd(Suspension_Coil$PSI)
sd(Suspension_Coil, PSI)
# Import libraries
library(tidyverse)
sd(Suspension_Coil, PSI=FALSE)
var(Suspension_Coil$PSI)
t.test(Suspension_Coil, mu= 1500)
t.test(Suspension_Coil, mu= 1500)
t.test(Suspension_Coil$PSI, mu= 1500)
# Import libraries
library(tidyverse)
# Load and read  MechaCar_mpg csv file
MechaCar <- read.csv("/Users/sonia_ij/Desktop/Data Analysis Class/Module 15/R_Analysis/Challenge/data/MechaCar_mpg.csv", check.names=TRUE)
#Generate multiple linear regression model with all variables
lm(mpg ~ vehicle.length + vehicle.weight + spoiler.angle + ground.clearance + AWD, data = MechaCar)
#Generate Summary Statistics
summary(lm(mpg ~ vehicle.length + vehicle.weight + spoiler.angle + ground.clearance + AWD, data = MechaCar))
----------------------------------------------------
# Load and read Suspension Coil csv file
Suspension_Coil <- read.csv("/Users/sonia_ij/Desktop/Data Analysis Class/Module 15/R_Analysis/Challenge/data/Suspension_Coil.csv", check.names=TRUE)
Suspension_Coil
#Generate Summary Statistics for Suspension Coil
summary(Suspension_Coil)
#Mean = 1500, Median = 1500, Variance = 76.23, Standard Deviation = 8.73
var(Suspension_Coil$PSI)
sd(Suspension_Coil,PSI)
-------------------------
#Suspension_Coil T-test
t.test(Suspension_Coil$PSI, mu= 1500)
# Import libraries
library(tidyverse)
# Load and read  MechaCar_mpg csv file
MechaCar <- read.csv("/Users/sonia_ij/Desktop/Data Analysis Class/Module 15/R_Analysis/Challenge/data/MechaCar_mpg.csv", check.names=TRUE)
#Generate multiple linear regression model with all variables
lm(mpg ~ vehicle.length + vehicle.weight + spoiler.angle + ground.clearance + AWD, data = MechaCar)
#Generate Summary Statistics
summary(lm(mpg ~ vehicle.length + vehicle.weight + spoiler.angle + ground.clearance + AWD, data = MechaCar))
----------------------------------------------------
# Load and read Suspension Coil csv file
Suspension_Coil <- read.csv("/Users/sonia_ij/Desktop/Data Analysis Class/Module 15/R_Analysis/Challenge/data/Suspension_Coil.csv", check.names=TRUE)
Suspension_Coil
#Generate Summary Statistics for Suspension Coil
summary(Suspension_Coil)
#Mean = 1500, Median = 1500, Variance = 76.23, Standard Deviation = 8.73
var(Suspension_Coil$PSI)
sd(Suspension_Coil$PSI)
-------------------------
#Suspension_Coil T-test
t.test(Suspension_Coil$PSI, mu= 1500)
# Import libraries
library(tidyverse)
# Load and read  MechaCar_mpg csv file
MechaCar <- read.csv("/Users/sonia_ij/Desktop/Data Analysis Class/Module 15/R_Analysis/Challenge/data/MechaCar_mpg.csv", check.names=TRUE)
#Generate multiple linear regression model with all variables
lm(mpg ~ vehicle.length + vehicle.weight + spoiler.angle + ground.clearance + AWD, data = MechaCar)
#Generate Summary Statistics
summary(lm(mpg ~ vehicle.length + vehicle.weight + spoiler.angle + ground.clearance + AWD, data = MechaCar))
#---------------------------------------------------------------#
# Load and read Suspension Coil csv file
Suspension_Coil <- read.csv("/Users/sonia_ij/Desktop/Data Analysis Class/Module 15/R_Analysis/Challenge/data/Suspension_Coil.csv", check.names=TRUE)
Suspension_Coil
#Generate Summary Statistics for Suspension Coil
summary(Suspension_Coil)
#Mean = 1500, Median = 1500, Variance = 76.23, Standard Deviation = 8.73
var(Suspension_Coil$PSI)
sd(Suspension_Coil$PSI)
# -------------------------------------------------------------#
#Suspension_Coil T-test
t.test(Suspension_Coil$PSI, mu= 1500)
setwd("~/Desktop/Data Analysis Class/Module 15")
library(car)
PlantGrowthData <- PlantGrowth
library(tidyverse)
library(ggpubr)
sprayData <- InsectSprays
ggdensity(sprayData$count,
x_lab = 'Insect count after spray - dependent variable'
)
shapiro.test(sprayData$count)
populationA <- subset(sprayData, spray == 'A')
populationB <- subset(sprayData, spray == 'B')
populationC <- subset(sprayData, spray == 'C')
populationD <- subset(sprayData, spray == 'D')
populationE <- subset(sprayData, spray == 'E')
populationF <- subset(sprayData, spray == 'F')
shapiro.test(populationA$count)
ggdensity(populationA$count,
x_lab = 'Insect count after spray - dependent variable'
)
shapiro.test(populationB$count)
ggdensity(populationB$count,
x_lab = 'Insect count after spray - dependent variable'
)
shapiro.test(populationC$count)
ggdensity(populationC$count,
x_lab = 'Insect count after spray - dependent variable'
)
shapiro.test(populationD$count)
ggdensity(populationD$count,
x_lab = 'Insect count after spray - dependent variable'
)
shapiro.test(populationE$count)
ggdensity(populationE$count,
x_lab = 'Insect count after spray - dependent variable'
)
shapiro.test(populationF$count)
ggdensity(populationF$count,
x_lab = 'Insect count after spray - dependent variable'
)
cleanedDataset <- c(populationA,populationB,populationE,populationF)
shapiro.test(cleanedDataset$count)
ggdensity(cleanedDataset$count,
x_lab = 'Insect count after spray - dependent variable'
)
populationMean <- mean(cleanedDataset$count)
populationMean
populationASample <- populationA %>% sample_n(6)
t.test(populationASample$count, mu = populationMean, alternative = 'two.sided')
populationBSample <- populationB %>% sample_n(6)
t.test(populationBSample$count, mu = populationMean, alternative = 'two.sided')
populationESample <- populationE %>% sample_n(6)
t.test(populationESample$count, mu = populationMean, alternative = 'two.sided')
populationDSample <- populationD %>% sample_n(6)
t.test(populationDSample$count, mu = populationMean, alternative = 'two.sided')
populationFSample <- populationF %>% sample_n(6)
t.test(populationFSample$count, mu = populationMean, alternative = 'two.sided')
library(car)
PlantGrowthData <- PlantGrowth
library(car)
PlantGrowthData <- PlantGrowth
PlantGrowthData
setwd("~/Desktop/Data Analysis Class/Module 15/R_Analysis/Challenge/data")
# Import libraries
library(tidyverse)
# Load and read  MechaCar_mpg csv file
MechaCar <- read.csv("MechaCar_mpg.csv", check.names = T,stringsAsFactors = F) #import used car dataset
MechaCar
#Generate multiple linear regression model with all variables
lm(mpg ~ vehicle.length + vehicle.weight + spoiler.angle + ground.clearance + AWD, data = MechaCar)
#Generate Summary Statistics
summary(lm(mpg ~ vehicle.length + vehicle.weight + spoiler.angle + ground.clearance + AWD, data = MechaCar))
#---------------------------------------------------------------#
# Load and read Suspension Coil csv file
SuspensionCoil_table<- read.csv("Suspension_Coil.csv",check.names = F,stringsAsFactors = F)
SuspensionCoil_table
#Generate the Summary Statistics for Suspension Coil
SuspensionCoil_table %>% summarize(PSI_Mean = mean(PSI), # Mean = 1499.531
PSI_Median = median(PSI), # Median = 1499.747
PSI_Variance = var(PSI), # Variance = 76.23459
PSI_StandardDeviation = sd(PSI)) # Standard Deviation = 8.731242
# Generate the Summary Statistics based on Manufacturing Lots using group_by()
SuspensionCoil_table %>% group_by(Manufacturing_Lot) %>% summarize(PSI_Mean = mean(PSI),
PSI_Median = median(PSI),
PSI_Variance = var(PSI),
PSI_StandardDeviation = sd(PSI))
#       Mean     Median  Variance SD
#Lot1   1500.    1500.   1.15    1.07
#Lot2   1500.    1499.   10.1    3.18
#Lot3   1499.    1498.   220.    14.8
# -------------------------------------------------------------#
#Suspension_Coil T-test
plt <- ggplot(SuspensionCoil_table,aes(x=log10(PSI))) #import dataset into ggplot2
plt + geom_density() #visualize distribution using density plot
sample_table <- SuspensionCoil_table %>% sample_n(50) #generate 50 randomly sampled data points
plt <- ggplot(sample_table,aes(x=log10(PSI))) #import dataset into ggplot2
plt + geom_density() #visualize distribution using density plot
sample_table2 <- SuspensionCoil_table %>% sample_n(50) #generate another 50 randomly sampled data points
plt <- ggplot(sample_table2,aes(x=log10(PSI))) #import dataset into ggplot2
plt + geom_density() #visualize distribution using density plot
t.test(log10(sample_table$PSI),log10(sample_table2$PSI)) #compare means of two samples
#determine if the suspension coil’s pound-per-inch results are statistically different from the mean population results of 1,500 pounds per inch
t.test(SuspensionCoil_table$PSI, mu= 1500)
t.test(subset(SuspensionCoil_table, Manufacturing_Lot == "Lot1")$PSI, mu = 1500)
t.test(subset(SuspensionCoil_table, Manufacturing_Lot == "Lot2")$PSI, mu = 1500)
t.test(subset(SuspensionCoil_table, Manufacturing_Lot == "Lot3")$PSI, mu = 1500)
# Import libraries
library(tidyverse)
# Load and read  MechaCar_mpg csv file
MechaCar <- read.csv("MechaCar_mpg.csv", check.names = T,stringsAsFactors = F) #import used car dataset
MechaCar
#Generate multiple linear regression model with all variables
lm(mpg ~ vehicle.length + vehicle.weight + spoiler.angle + ground.clearance + AWD, data = MechaCar)
#Generate Summary Statistics
summary(lm(mpg ~ vehicle.length + vehicle.weight + spoiler.angle + ground.clearance + AWD, data = MechaCar))
#---------------------------------------------------------------#
# Load and read Suspension Coil csv file
SuspensionCoil_table<- read.csv("Suspension_Coil.csv",check.names = F,stringsAsFactors = F)
SuspensionCoil_table
#Generate the Summary Statistics for Suspension Coil
SuspensionCoil_table %>% summarize(PSI_Mean = mean(PSI), # Mean = 1499.531
PSI_Median = median(PSI), # Median = 1499.747
PSI_Variance = var(PSI), # Variance = 76.23459
PSI_StandardDeviation = sd(PSI)) # Standard Deviation = 8.731242
# Generate the Summary Statistics based on Manufacturing Lots using group_by()
SuspensionCoil_table %>% group_by(Manufacturing_Lot) %>% summarize(PSI_Mean = mean(PSI),
PSI_Median = median(PSI),
PSI_Variance = var(PSI),
PSI_StandardDeviation = sd(PSI))
#       Mean     Median  Variance SD
#Lot1   1500.    1500.   1.15    1.07
#Lot2   1500.    1499.   10.1    3.18
#Lot3   1499.    1498.   220.    14.8
# -------------------------------------------------------------#
#Suspension_Coil T-test
plt <- ggplot(SuspensionCoil_table,aes(x=log10(PSI))) #import dataset into ggplot2
plt + geom_density() #visualize distribution using density plot
sample_table <- SuspensionCoil_table %>% sample_n(50) #generate 50 randomly sampled data points
plt <- ggplot(sample_table,aes(x=log10(PSI))) #import dataset into ggplot2
plt + geom_density() #visualize distribution using density plot
sample_table2 <- SuspensionCoil_table %>% sample_n(50) #generate another 50 randomly sampled data points
plt <- ggplot(sample_table2,aes(x=log10(PSI))) #import dataset into ggplot2
plt + geom_density() #visualize distribution using density plot
t.test(log10(sample_table$PSI),log10(sample_table2$PSI)) #compare means of two samples
#determine if the suspension coil’s pound-per-inch results are statistically different from the mean population results of 1,500 pounds per inch
t.test(SuspensionCoil_table$PSI, mu= 1500)
t.test(subset(SuspensionCoil_table, Manufacturing_Lot == "Lot1")$PSI, mu = 1500)
t.test(subset(SuspensionCoil_table, Manufacturing_Lot == "Lot2")$PSI, mu = 1500)
t.test(subset(SuspensionCoil_table, Manufacturing_Lot == "Lot3")$PSI, mu = 1500)
